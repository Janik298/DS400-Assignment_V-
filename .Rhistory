temp_1 <- tibble()
a <- tibble()
for (i in 1:36) {
temp_1 <- as.data.frame(last_page[[i]])
a <- bind_rows(a, temp_1)
}
View(all_venues_de)
temp_1 <- tibble()
for (i in 1:36) {
temp_1 <- as.data.frame(last_page[[i]])
all_venues_de_df <- bind_rows(all_venues_de_df, temp_1)
}
as.data.frame(last_page[[37]])
ggplot() +
borders("world", "Germany", colour = "black", fill = "grey90") +
theme_void() +
coord_quickmap() +
labs(title = "Event locations across Germany",
caption = "Source: ticketmaster.com") +
theme(title = element_text(size=8, face='bold'),
plot.caption = element_text(face = "italic"))
library(maps)
View(all_venues_de_df)
all_venues_de_df <- all_venues_de_df %>% select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
View(all_venues_de_df)
all_venues_de_df <- tibble()
temp <- tibble()
for (i in 1:64) {
temp <- map(.x = all_venues_de[[i]], as.data.frame) %>%
bind_rows() %>%
select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
all_venues_de_df <- rbind(all_venues_de_df, temp)
}
temp <- tibble()
all_venues_de_df <- tibble()
temp <- tibble()
for (i in 1:64) {
temp <- map(.x = all_venues_de[[i]], as.data.frame) %>%
bind_rows() %>%
select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
all_venues_de_df <- rbind(all_venues_de_df, temp)
}
all_venues_de_df <- tibble()
temp <- tibble()
for (i in 1:64) {
temp <- map(.x = all_venues_de[[i]], as.data.frame) %>%
bind_rows() %>%
select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
all_venues_de_df <- rbind(all_venues_de_df, temp)
}
for (i in 1:64) {
temp <- map(.x = all_venues_de[[i]], as.data.frame) %>%
bind_rows() %>%
select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
all_venues_de_df <- rbind(all_venues_de_df, temp)
}
all_venues_de_df <- tibble()
temp <- tibble()
for (i in 1:64) {
temp <- map(.x = all_venues_de[[i]], as.data.frame) %>%
bind_rows() %>%
select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
all_venues_de_df <- rbind(all_venues_de_df, temp)
}
temp <- map(.x = all_venues_de[[i]], as.data.frame) %>%
bind_rows() %>%
select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
for (i in 1:64) {
temp <- map(.x = all_venues_de[[i]], as.data.frame) %>%
bind_rows() %>%
select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
all_venues_de_df <- rbind(all_venues_de_df, temp)
}
all_venues_de <- map(.x = 0:64, .f = worker)
View(all_venues_de)
all_venues_de_df <- tibble()
temp <- tibble()
for (i in 1:64) {
temp <- map(.x = all_venues_de[[i]], as.data.frame) %>%
bind_rows() %>%
select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
all_venues_de_df <- rbind(all_venues_de_df, temp)
}
worker <- function(page){
# Setting the rate Limit
Sys.sleep(0.3)
# Building the request and specifying everything but the pages
venues <- GET('https://app.ticketmaster.com/discovery/v2/venues',
query = list("apikey" = api_key,
"countryCode" = "DE",
"locale" = "*",
"page" = page,
"size" = 199)) # total elements are 12935 which is just 65*199 -> set the size to 199 to get only full pages
# Return the Information
return(content(venues)$`_embedded`$venues)
}
all_venues_de <- map(.x = 0:64, .f = worker)
library(jsonlite)
library(httr)
library(tidyverse)
library(rlist)
library(maps)
# Make a first request to get the event venues in Germany
event_venues_de <- GET("https://app.ticketmaster.com/discovery/v2/venues",
query = list("apikey" = api_key,
"countryCode" = "DE",
"locale" = "*",
"size" = 20)) %>% content # directly extracting the contents
source('api_key.R')
# Make a first request to get the event venues in Germany
event_venues_de <- GET("https://app.ticketmaster.com/discovery/v2/venues",
query = list("apikey" = api_key,
"countryCode" = "DE",
"locale" = "*",
"size" = 20)) %>% content # directly extracting the contents
# With the size argument I can choose the page size of the response
# Extracting the wanted items
venues_de <- event_venues_de$`_embedded`$venues # this is a list containing all the venues (at least the first page)
venues_de_df <- map(.x = venues_de, as.data.frame) %>% # I now have transformed the the sublists into dataframes
bind_rows() %>% # We now have a dataframe containing all information, but in an untidy way
select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
View(venues_de)
View(venues_de)
venues_de_df
venues_de
map(.x = venues_de, as.data.frame)
# Loading the packages
library(jsonlite)
library(httr)
library(tidyverse)
library(rlist)
library(maps)
options(scipen=999)
git_repository_url <- "https://github.com/Janik298/DS400-Assignment_V-.git"
source('api_key.R')
# Make a first request to get the event venues in Germany
event_venues_de <- GET("https://app.ticketmaster.com/discovery/v2/venues",
query = list("apikey" = api_key,
"countryCode" = "DE",
"locale" = "*",
"size" = 20)) %>% content # directly extracting the contents
# With the size argument I can choose the page size of the response
# Extracting the wanted items
venues_de <- event_venues_de$`_embedded`$venues # this is a list containing all the venues (at least the first page)
venues_de_df <- map(.x = venues_de, as.data.frame) %>% # I now have transformed the the sublists into dataframes
bind_rows() %>% # We now have a dataframe containing all information, but in an untidy way
select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
map(.x = venues_de, as.data.frame) %>% # I now have transformed the the sublists into dataframes
bind_rows() %>% # We now have a dataframe containing all information, but in an untidy way
select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
map(.x = venues_de, as.data.frame) %>% # I now have transformed the the sublists into dataframes
bind_rows()
options(scipen=999)
library(jsonlite)
library(httr)
library(tidyverse)
library(rlist)
source('api_key.R')
event_venues_de <- GET("https://app.ticketmaster.com/discovery/v2/venues",
query = list("apikey" = api_key,
"countryCode" = "DE",
"locale" = "*",
"size" = 20)) %>% content # directly extracting the contents
# Extracting the wanted items
venues_de <- event_venues_de$`_embedded`$venues # this is a list containing all the venues (at least the first page)
venues_de_df <- map(.x = venues_de, as.data.frame) %>% # I now have transformed the the sublists into dataframes
bind_rows() %>% # We now have a dataframe containing all information, but in an untidy way
select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
## First we are going to write a function that will perform the get request and adheres to the rate limit
worker <- function(page){
# Setting the rate Limit
Sys.sleep(0.3)
# Building the request and specifying everything but the pages
venues <- GET('https://app.ticketmaster.com/discovery/v2/venues',
query = list("apikey" = api_key,
"countryCode" = "DE",
"locale" = "*",
"page" = page,
"size" = 199)) # total elements are 12935 which is just 65*199 -> set the size to 199 to get only full pages
# Return the Information
return(content(venues)$`_embedded`$venues)
}
## Requesting the data (Attention: pages are zero indexed)
# First making a small request to check the number of pages that I have to iterate over
test <- GET("https://app.ticketmaster.com/discovery/v2/venues",
query = list("apikey" = api_key,
"countryCode" = "DE",
"locale" = "*",
"page" = 64,
"size" = 199)) %>% content # directly extracting the contents
# I need to go over 65 pages
all_venues_de <- map(.x = 0:64, .f = worker) # this is now a list which contains sublists that contain the data we are interested in
## Creating a Data-Frame out of the lists
all_venues_de_df <- tibble()
temp <- tibble()
for (i in 1:64) {
temp <- map(.x = all_venues_de[[i]], as.data.frame) %>%
bind_rows() %>%
select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
all_venues_de_df <- rbind(all_venues_de_df, temp)
}
# There is a problem with the last page which I am going to fix by hand:
last_page <- all_venues_de[[65]]
temp_1 <- tibble()
for (i in 1:36) {
temp_1 <- as.data.frame(last_page[[i]])
all_venues_de_df <- bind_rows(all_venues_de_df, temp_1)
}
# I was not able to solve this problem completely, somehow the last page is not convertible into a data-frame. I will leave them out and calulate with the data that I have:
View(all_venues_de_df)
all_venues_de_df <- all_venues_de_df %>% select(name, city, postal_code, address, url, longitude, latitude)
View(all_venues_de_df)
ggplot(data = all_venues_de_df) +
borders("world", "Germany", colour = "black", fill = "grey90") +
theme_void() +
coord_quickmap() +
labs(title = "Event locations across Germany",
caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic")) +
geom_point(mapping = aes(x = longitude, y = latitude))
ggplot(data = all_venues_de_df)
+
borders("world", "Germany", colour = "black", fill = "grey90")
ggplot(data = all_venues_de_df) +
borders("world", "Germany", colour = "black", fill = "grey90") +
theme_void()
ggplot(data = all_venues_de_df) +
borders("world", "Germany", colour = "black", fill = "grey90") +
theme_void() +
coord_quickmap()
ggplot(data = all_venues_de_df) +
borders("world", "Germany", colour = "black", fill = "grey90") +
theme_void() +
coord_quickmap() +
geom_point(mapping = aes(x = longitude, y = latitude))
View(all_venues_de_df)
all_venues_de_df
as.numeric(all_venues_de_df$longitude)
all_venues_de_df <- all_venues_de_df %>% select(name, city, postal_code, address, url, longitude, latitude) %>% as.numeric(longitude)
all_venues_de_df <- all_venues_de_df %>% select(name, city, postal_code, address, url, longitude, latitude) %>% mutate(longitude = as.numeric())
all_venues_de_df <- all_venues_de_df %>% select(name, city, postal_code, address, url, longitude, latitude) %>% mutate(longitude = as.numeric(longitude))
all_venues_de_df
all_venues_de_df <- all_venues_de_df %>% select(name, city, postal_code, address, url, longitude, latitude) %>% mutate(longitude = as.numeric(longitude), latitude = as.numeric(latitude))
all_venues_de_df
ggplot(data = all_venues_de_df) +
borders("world", "Germany", colour = "black", fill = "grey90") +
theme_void() +
coord_quickmap() +
geom_point(mapping = aes(x = longitude, y = latitude)) +
labs(title = "Event locations across Germany",
caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic"))
head(all_venues_de_df, n = 10)
shape(all_venues_de_df)
dim(all_venues_de_df)
all_venues_de_df_2 <- all_venues_de_df
all_venues_de_df <- all_venues_de_df %>% filter(longitude < 15.042 & longitude > 5.866) %>% filter(latitude > 47.270 & latitude < 55.059)
all_venues_de_df
ggplot(data = all_venues_de_df) +
borders("world", "Germany", colour = "black", fill = "grey90") +
theme_void() +
coord_quickmap() +
geom_point(mapping = aes(x = longitude, y = latitude)) +
labs(title = "Event locations across Germany",
caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic"))
test_lu <- GET("https://app.ticketmaster.com/discovery/v2/venues",
query = list("apikey" = api_key,
"countryCode" = "LU",
"locale" = "*",
"page" = 0,
"size" = 20)) %>% content
View(test_lu)
test_lu <- GET("https://app.ticketmaster.com/discovery/v2/venues",
query = list("apikey" = api_key,
"countryCode" = "FR",
"locale" = "*",
"page" = 0,
"size" = 20)) %>% content
View(test_lu)
worker_fr <- function(page){
# Setting the rate Limit
Sys.sleep(0.3)
# Building the request and specifying everything but the pages
venues <- GET('https://app.ticketmaster.com/discovery/v2/venues',
query = list("apikey" = api_key,
"countryCode" = "FR",
"locale" = "*",
"page" = page,
"size" = )) # total elements are 102 which is just  -> set the size to 199 to get only full pages
# Return the Information
return(content(venues)$`_embedded`$venues)
}
test_fr <- GET("https://app.ticketmaster.com/discovery/v2/venues",
query = list("apikey" = api_key,
"countryCode" = "FR",
"locale" = "*",
"page" = 0,
"size" = 20)) %>% content
View(test_fr)
venues_lu <- GET('https://app.ticketmaster.com/discovery/v2/venues',
query = list("apikey" = api_key,
"countryCode" = "LU",
"locale" = "*",
"size" = 102)) %>% content()
View(venues_lu)
as.data.frame(venues_lu)
a <- as.data.frame(venues_lu)
View(a)
venues_lu_df <- map(venues_lu, .f = as.data.frame)
View(venues_lu_df)
venues_lu_df <- map(venues_lu$_embedded, .f = as.data.frame)
venues_lu_df <- map(venues_lu$`_embedded`, .f = as.data.frame)
View(venues_lu_df)
venues_lu_df <- map(venues_lu$`_embedded`$venues, .f = as.data.frame)
View(venues_lu_df)
View(venues_lu_df)
venues_lu_df <- map(venues_lu$`_embedded`$venues, .f = as.data.frame) %>% bind_rows()
View(venues_lu_df)
venues_lu_df <- map(venues_lu$`_embedded`$venues, .f = as.data.frame) %>% bind_rows() %>% select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
head(venues_lu_df, n = 10)
dim(venues_lu_df)
ggplot(data = venues_lu_df) +
borders("world", "Luxembourg", colour = "black", fill = "grey90") +
theme_void() +
coord_quickmap() +
geom_point(mapping = aes(x = longitude, y = latitude)) +
labs(title = "Event locations across Germany",
caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic"))
venues_lu_df <- map(venues_lu$`_embedded`$venues, .f = as.data.frame) %>% bind_rows() %>% select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude) %>% mutate(lonitude = as.numeric(longitude), latitude = as.numeric(latitude))
ggplot(data = venues_lu_df) +
borders("world", "Luxembourg", colour = "black", fill = "grey90") +
theme_void() +
coord_quickmap() +
geom_point(mapping = aes(x = longitude, y = latitude)) +
labs(title = "Event locations across Germany",
caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic"))
venues_lu_df
venues_lu_df <- map(venues_lu$`_embedded`$venues, .f = as.data.frame) %>% bind_rows() %>% select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude) %>% mutate(longiude = as.numeric(longitude), latitude = as.numeric(latitude))
ggplot(data = venues_lu_df) +
borders("world", "Luxembourg", colour = "black", fill = "grey90") +
theme_void() +
coord_quickmap() +
geom_point(mapping = aes(x = longitude, y = latitude)) +
labs(title = "Event locations across Germany",
caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic"))
venues_lu_df
venues_lu <- GET('https://app.ticketmaster.com/discovery/v2/venues',
query = list("apikey" = api_key,
"countryCode" = "LU",
"locale" = "*",
"size" = 102)) %>% content()
venues_lu_df <- map(venues_lu$`_embedded`$venues, .f = as.data.frame) %>% bind_rows() %>% select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude) %>% mutate(longiude = as.numeric(longitude), latitude = as.numeric(latitude))
ggplot(data = venues_lu_df) +
borders("world", "Luxembourg", colour = "black", fill = "grey90") +
theme_void() +
coord_quickmap() +
geom_point(mapping = aes(x = longitude, y = latitude)) +
labs(title = "Event locations across Germany",
caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic"))
venues_lu <- GET('https://app.ticketmaster.com/discovery/v2/venues',
query = list("apikey" = api_key,
"countryCode" = "LU",
"locale" = "*",
"size" = 102)) %>% content()
venues_lu_df <- map(venues_lu$`_embedded`$venues, .f = as.data.frame) %>% bind_rows() %>% select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude) %>% mutate(longitude = as.numeric(longitude), latitude = as.numeric(latitude))
ggplot(data = venues_lu_df) +
borders("world", "Luxembourg", colour = "black", fill = "grey90") +
theme_void() +
coord_quickmap() +
geom_point(mapping = aes(x = longitude, y = latitude)) +
labs(title = "Event locations across Germany",
caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic"))
ggplot(data = venues_lu_df) +
borders("world", "Luxembourg", colour = "black", fill = "grey90") +
theme_void() +
coord_quickmap() +
geom_point(mapping = aes(x = longitude, y = latitude)) +
labs(title = "Event locations across Germany",
caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic"))
test <- GET("https://app.ticketmaster.com/discovery/v2/venues",
query = list("apikey" = api_key,
"countryCode" = "BE",
"locale" = "*",
"page" = 0,
"size" = 20)) %>% content
View(test)
test <- GET("https://app.ticketmaster.com/discovery/v2/venues",
query = list("apikey" = api_key,
"countryCode" = "NL",
"locale" = "*",
"page" = 0,
"size" = 20)) %>% content
View(test)
test <- GET("https://app.ticketmaster.com/discovery/v2/venues",
query = list("apikey" = api_key,
"countryCode" = "BE",
"locale" = "*",
"page" = 0,
"size" = 20)) %>% content
View(test)
View(test)
worker_be <- function(page){
# Setting the rate Limit
Sys.sleep(0.3)
# Building the request and specifying everything but the pages
venues <- GET('https://app.ticketmaster.com/discovery/v2/venues',
query = list("apikey" = api_key,
"countryCode" = "BE",
"locale" = "*",
"page" = page,
"size" = 20))
# Return the Information
return(content(venues)$`_embedded`$venues)
}
temp_be <- tibble()
venues_be_df <- tibble()
all_venues_de <- map(.x = i, .f = worker_be)
for (i in 0:55) {
all_venues_de <- map(.x = i, .f = worker_be)
}
venues_be <- map(.x = i, .f = worker_be)
for (i in 0:55) {
venues_be <- map(.x = i, .f = worker_be)
}
View(venues_be)
venues_be <- map(.x = i, .f = worker_be)
View(venues_be)
venues_be <- map(.x = 0:55, .f = worker_be)
View(venues_be)
temp_be <- tibble()
venues_be_df <- tibble()
venues_be <- map(.x = 0:55, .f = worker_be)
## Creating a Data-Frame out of the lists
for (i in 1:56) {
temp_be <- map(.x = venues_be[[i]], as.data.frame) %>%
bind_rows() %>%
select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
venues_be_df <- rbind(venues_be_df, temp_be)
}
for (i in 1:56) {
temp_be <- map(.x = venues_be[[i]], as.data.frame) %>%
bind_rows()
venues_be_df <- rbind(venues_be_df, temp_be)
}
temp_be <- tibble()
venues_be_df <- tibble()
venues_be <- map(.x = 0:55, .f = worker_be)
for (i in 1:56) {
temp_be <- map(.x = venues_be[[i]], as.data.frame) %>%
bind_rows()
venues_be_df <- rbind(venues_be_df, temp_be)
}
for (i in 1:56) {
temp_be <- map(.x = venues_be[[i]], as.data.frame) %>%
bind_rows()
venues_be_df <- bind_rows(venues_be_df, temp_be)
}
venues_be_df
venues_be <- venues_be_df %>% select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
venues_be
venues_be_df <- venues_be_df %>% select(name, city, postal_code, address, url, longitude, latitude) %>% mutate(longitude = as.numeric(longitude), latitude = as.numeric(latitude))
venues_be
venues_be_df <- venues_be_df %>% select(name, city, postal_code, address, url, longitude, latitude) %>% mutate(longitude = as.numeric(longitude), latitude = as.numeric(latitude))
venues_be_df <- venues_be_df %>% select(name, city = name.1, postal_code = postalCode, address = line1, url, longitude = location.longitude, latitude = location.latitude)
venues_be_df <- venues_be_df %>% select(name, city, postal_code, address, url, longitude, latitude) %>% mutate(longitude = as.numeric(longitude), latitude = as.numeric(latitude))
head(venues_be_df, n = 10)
dim(venues_be_df)
ggplot(data = all_venues_de_df) +
borders("world", "Belgium", colour = "black", fill = "grey90") +
theme_void() +
coord_quickmap() +
geom_point(mapping = aes(x = longitude, y = latitude)) +
labs(title = "Event locations across Germany",
caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic"))
ggplot(data = venues_be_df) +
borders("world", "Belgium", colour = "black", fill = "grey90") +
theme_void() +
coord_quickmap() +
geom_point(mapping = aes(x = longitude, y = latitude)) +
labs(title = "Event locations across Germany",
caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic"))
venues_be_df <- venues_be_df %>% filter(longitude < 6.3831 & longitude > 2.35) %>% filter(latitude > 49.5072 & latitude < 51.4978)
venues_be_df <- venues_be_df %>% filter(longitude < 6.3831 & longitude > 2.35) %>% filter(latitude > 49.5072 & latitude < 51.4978)
ggplot(data = venues_be_df) +
borders("world", "Belgium", colour = "black", fill = "grey90") +
theme_void() +
coord_quickmap() +
geom_point(mapping = aes(x = longitude, y = latitude)) +
labs(title = "Event locations across Belgium",
caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic"))
